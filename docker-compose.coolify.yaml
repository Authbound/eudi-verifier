version: '3.3'

services:
  verifier:
    image: ghcr.io/eu-digital-identity-wallet/eudi-srv-web-verifier-endpoint-23220-4-kt:latest
    container_name: verifier-backend
    environment:
      VERIFIER_PUBLICURL: "https://verifier.authbound.io"
      VERIFIER_RESPONSE_MODE: "DirectPost"
    restart: unless-stopped
    # ports:
    #  - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - coolify

  verifier-ui:
    image: ghcr.io/eu-digital-identity-wallet/eudi-web-verifier:latest
    container_name: verifier-ui
    restart: unless-stopped
    environment:
      - DOMAIN_NAME=""
      - HOST_API="https://verifier.authbound.io"
    # ports:
    #  - "4300:4300"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4300 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      # Traefik Routers for path-based routing
      # Ensure Traefik is enabled in Coolify settings for this domain

      # Router for Backend Paths (Higher Priority)
      - "traefik.http.routers.verifier-backend-proxy.rule=Host(`verifier.authbound.io`) && (PathPrefix(`/api`) || PathPrefix(`/ui`) || PathPrefix(`/wallet`))"
      - "traefik.http.routers.verifier-backend-proxy.service=verifier-backend@docker"
      - "traefik.http.routers.verifier-backend-proxy.entrypoints=https"
      - "traefik.http.routers.verifier-backend-proxy.priority=11"
      - "traefik.http.routers.verifier-backend-proxy.tls.certresolver=letsencrypt" # Adjust if Coolify uses a different resolver name

      # Router for UI/Frontend Path (Lower Priority Catch-all for the host)
      - "traefik.http.routers.verifier-ui-proxy.rule=Host(`verifier.authbound.io`) && PathPrefix(`/`)"
      - "traefik.http.routers.verifier-ui-proxy.service=verifier-ui@docker"
      - "traefik.http.routers.verifier-ui-proxy.entrypoints=https"
      - "traefik.http.routers.verifier-ui-proxy.priority=10"
      - "traefik.http.routers.verifier-ui-proxy.tls.certresolver=letsencrypt" # Adjust if Coolify uses a different resolver name

      # Optional: Explicitly tell Traefik which port the service listens on, if Coolify doesn't infer it.
      # - "traefik.http.services.verifier-ui@docker.loadbalancer.server.port=4300"

    networks:
      - coolify

# Optional: Add under 'verifier' service if backend port isn't inferred
# labels:
#   - "traefik.http.services.verifier-backend@docker.loadbalancer.server.port=8080"

networks:
  coolify:
    external: true